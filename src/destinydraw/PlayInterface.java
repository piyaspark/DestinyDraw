/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package destinydraw;

import java.awt.Dimension;
import java.io.File;
import javax.swing.JOptionPane;
import sun.audio.*;
import java.io.*;

/**
 *
 * @author Administrator
 */
public class PlayInterface extends javax.swing.JFrame {

    public static int round = -1;
    private static int count = 0;
    private String[] playerCard;
    private String[] dealerCard;
    private int playerScore = 0;
    private int dealerScore = 0;
    private static long money = 1000;
    private static long moneyBet = 0;

    /**
     * Creates new form PlayInterface
     */
    public PlayInterface() {
        this.setPreferredSize(new Dimension(1089, 595));
        this.setMinimumSize(new Dimension(1089, 595));
        this.setLocationRelativeTo(null);
        initComponents();
        MoneyShow.setText("Money : " + String.valueOf(money));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        player1 = new javax.swing.JLabel();
        player2 = new javax.swing.JLabel();
        player3 = new javax.swing.JLabel();
        player4 = new javax.swing.JLabel();
        player5 = new javax.swing.JLabel();
        dealer1 = new javax.swing.JLabel();
        dealer2 = new javax.swing.JLabel();
        dealer3 = new javax.swing.JLabel();
        dealer4 = new javax.swing.JLabel();
        dealer5 = new javax.swing.JLabel();
        MoneyShow = new javax.swing.JLabel();
        MoneyBet = new javax.swing.JLabel();
        Deckofcard = new javax.swing.JLabel();
        coin5 = new javax.swing.JButton();
        coin25 = new javax.swing.JButton();
        coin100 = new javax.swing.JButton();
        coin500 = new javax.swing.JButton();
        coin1000 = new javax.swing.JButton();
        Play = new javax.swing.JButton();
        Hit = new javax.swing.JButton();
        Stand = new javax.swing.JButton();
        Help = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        Background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        player1.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 250, 110, 160));

        player2.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 250, 110, 160));

        player3.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 250, 110, 160));

        player4.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 250, 110, 160));

        player5.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player5, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 250, 110, 160));

        dealer1.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 110, 160));

        dealer2.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, 110, 160));

        dealer3.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, 110, 160));

        dealer4.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 40, 110, 160));

        dealer5.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer5, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 40, 110, 160));

        MoneyShow.setFont(new java.awt.Font("DIN Alternate", 1, 24)); // NOI18N
        MoneyShow.setForeground(new java.awt.Color(255, 255, 255));
        MoneyShow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Money.png"))); // NOI18N
        MoneyShow.setText("Money: 1000");
        MoneyShow.setToolTipText("");
        getContentPane().add(MoneyShow, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, 310, 70));

        MoneyBet.setFont(new java.awt.Font("DIN Alternate", 1, 24)); // NOI18N
        MoneyBet.setForeground(new java.awt.Color(240, 240, 240));
        MoneyBet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/BetMoney.png"))); // NOI18N
        MoneyBet.setText("Bet: 0");
        getContentPane().add(MoneyBet, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 490, 250, 80));

        Deckofcard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Deckofcard.png"))); // NOI18N
        getContentPane().add(Deckofcard, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 110, 180));

        coin5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/5coin.png"))); // NOI18N
        coin5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        coin5.setContentAreaFilled(false);
        coin5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coin5ActionPerformed(evt);
            }
        });
        getContentPane().add(coin5, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 500, 60, 60));

        coin25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/25coin.png"))); // NOI18N
        coin25.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        coin25.setContentAreaFilled(false);
        coin25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coin25ActionPerformed(evt);
            }
        });
        getContentPane().add(coin25, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 510, 60, 60));

        coin100.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/100coin.png"))); // NOI18N
        coin100.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        coin100.setContentAreaFilled(false);
        coin100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coin100ActionPerformed(evt);
            }
        });
        getContentPane().add(coin100, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 510, 60, 60));

        coin500.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/500coin.png"))); // NOI18N
        coin500.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        coin500.setContentAreaFilled(false);
        coin500.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coin500ActionPerformed(evt);
            }
        });
        getContentPane().add(coin500, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 510, 60, 60));

        coin1000.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/1000coin.png"))); // NOI18N
        coin1000.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        coin1000.setContentAreaFilled(false);
        coin1000.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coin1000ActionPerformed(evt);
            }
        });
        getContentPane().add(coin1000, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 500, 60, 60));

        Play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/playbutton.png"))); // NOI18N
        Play.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Play.setContentAreaFilled(false);
        Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayActionPerformed(evt);
            }
        });
        getContentPane().add(Play, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 60, 150, 70));

        Hit.setFont(new java.awt.Font("DIN Alternate", 1, 24)); // NOI18N
        Hit.setForeground(new java.awt.Color(255, 255, 255));
        Hit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/hitbutton.png"))); // NOI18N
        Hit.setText("HIT");
        Hit.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Hit.setContentAreaFilled(false);
        Hit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HitActionPerformed(evt);
            }
        });
        getContentPane().add(Hit, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 150, 150, 50));

        Stand.setFont(new java.awt.Font("DIN Alternate", 1, 24)); // NOI18N
        Stand.setForeground(new java.awt.Color(255, 255, 255));
        Stand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/standbutton.png"))); // NOI18N
        Stand.setText("STAND");
        Stand.setToolTipText("");
        Stand.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Stand.setContentAreaFilled(false);
        Stand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StandActionPerformed(evt);
            }
        });
        getContentPane().add(Stand, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 210, 190, 80));

        Help.setFont(new java.awt.Font("DIN Alternate", 0, 24)); // NOI18N
        Help.setForeground(new java.awt.Color(255, 255, 255));
        Help.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/helpbutton.png"))); // NOI18N
        Help.setText("HELP");
        Help.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpActionPerformed(evt);
            }
        });
        getContentPane().add(Help, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 300, 120, -1));

        Reset.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        Reset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/reset.png"))); // NOI18N
        Reset.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Reset.setContentAreaFilled(false);
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });
        getContentPane().add(Reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 60, 60, 70));

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/tableBackground.png"))); // NOI18N
        getContentPane().add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1090, 580));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HitActionPerformed
        if (moneyBet != 0) {
            if (round == -1) {
                JOptionPane.showMessageDialog(null, "       Please click PLAY button to start", "Error", 0);
            } else if (round == 10) {
                JOptionPane.showMessageDialog(null, "       Cannot interacted\nPlease reset by RESET button", "Error", 0);
            } else {
                switch (round) {

                    case 0:
                        player3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[2] + ".png")));
                        round++;
                        playerScore += Hand.cardValuePlayer[2];
                        checkBlackjackPlayer(playerScore);

                        break;
                    case 1:
                        player4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[3] + ".png")));
                        round++;
                        playerScore += Hand.cardValuePlayer[3];
                        checkBlackjackPlayer(playerScore);

                        break;
                    case 2:
                        player5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[4] + ".png")));
                        round++;
                        playerScore += Hand.cardValuePlayer[4];
                        checkBlackjackPlayer(playerScore);

                        break;
                    default:
                        break;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "        Please bet before start to play", "Error", 0);
        }
    }//GEN-LAST:event_HitActionPerformed

    private void StandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StandActionPerformed
        Reset.setVisible(true);
        if (moneyBet != 0) {
            if (round == -1) {
                JOptionPane.showMessageDialog(null, "        Please click PLAY button to start", "Error", 0);
                round = -1;
            } else if (round == 10) {
                JOptionPane.showMessageDialog(null, "        Cannot interacted\nPlease reset by RESET button", "Error", 0);
            } else {
                for (int i = 1; i < dealerCard.length; i++) {
                    dealerScore += Hand.cardValueDealer[i];
                    if (dealerScore < 17) {
                        count++;
                    } else {
                        break;
                    }
                }
                switch (count) {
                    case 0:
                        dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[1] + ".png")));
//                    dealerScore += Hand.cardValueDealer[1];
                        checkWinORLose(playerScore, dealerScore);
                        round = 10;

                        break;
                    case 1:
                        dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[1] + ".png")));
                        dealer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[2] + ".png")));
//                    dealerScore += Hand.cardValueDealer[1]+Hand.cardValueDealer[2];
                        checkWinORLose(playerScore, dealerScore);
                        round = 10;

                        break;
                    case 2:
                        dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[1] + ".png")));
                        dealer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[2] + ".png")));
                        dealer4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[3] + ".png")));
//                    dealerScore += Hand.cardValueDealer[1]+Hand.cardValueDealer[2]+Hand.cardValueDealer[3];
                        checkWinORLose(playerScore, dealerScore);
                        round = 10;

                        break;
                    case 3:
                        dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[1] + ".png")));
                        dealer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[2] + ".png")));
                        dealer4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[3] + ".png")));
                        dealer5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[4] + ".png")));
//                    dealerScore += Hand.cardValueDealer[1]+Hand.cardValueDealer[2]+Hand.cardValueDealer[3]+Hand.cardValueDealer[4];
                        checkWinORLose(playerScore, dealerScore);
                        round = 10;
                        break;
                    default:
                        round = 10;
                        break;

                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "         Please bet before start to play", "Error", 0);
        }
    }//GEN-LAST:event_StandActionPerformed
    private void PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayActionPerformed

        if (moneyBet != 0) {
            if (round != 10) {
                round = 0;

                playerCard = Hand.cardFilePlayer;
                dealerCard = Hand.cardFileDealer;

                player1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[0] + ".png")));
                player2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[1] + ".png")));

                dealer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[0] + ".png")));
                dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/backOfCard.jpg")));
                Reset.setVisible(false);
                playerScore = Hand.cardValuePlayer[0] + Hand.cardValuePlayer[1];
                checkBlackjackPlayer(playerScore);
                if (playerScore == 21) {
                    JOptionPane.showMessageDialog(null, "          You got Blackjack!\nClick RESET and then click PLAY to play again", "Match Ended", 0);
                    Reset.setVisible(true);
                    money += moneyBet * 3;
                    showMoneyAndBet();
                    round = 10;
                }

                dealerScore = Hand.cardValueDealer[0];
//            checkBlackjackDealer(dealerScore);
//            if (dealerScore == 21) {
//                JOptionPane.showMessageDialog(null, "          Dealer got Blackjack!\nClick RESET and then click PLAY to play again", "Match Ended", 0);
//              Reset.setVisible(true);
//                money -= moneyBet;
//                showMoneyAndBet();
//                round = 10;
//            }

            } else {
                JOptionPane.showMessageDialog(null, "          Cannot interacted\nPlease reset by PLAY button", "Error", 0);
            }
        } else {
            JOptionPane.showMessageDialog(null, "          You forgot to bet or reset", "Error", 0);
        }


    }//GEN-LAST:event_PlayActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        if (moneyBet != 0) {
            money += moneyBet;
            moneyBet = 0;
            showMoneyAndBet();
//            round=-1;
//        JOptionPane.showMessageDialog(null, "        Please bet again and start by START buuton", "Error", 0);Deck.cards.clear();
        } else {

            Deck.newDeck();
            Hand.drawCardPlayer();
            Hand.drawCardDealer();

            player1.setIcon(null);
            player2.setIcon(null);
            player3.setIcon(null);
            player4.setIcon(null);
            player5.setIcon(null);

            dealer1.setIcon(null);
            dealer2.setIcon(null);
            dealer3.setIcon(null);
            dealer4.setIcon(null);
            dealer5.setIcon(null);

            playerScore = 0;
            dealerScore = 0;
            moneyBet = 0;

            showMoneyAndBet();

            round = -1;
            count = 0;
        }
        //redo to fix bug     
        if (moneyBet != 0) {
            money += moneyBet;
            moneyBet = 0;
            showMoneyAndBet();
//            round=-1;
//        JOptionPane.showMessageDialog(null, "        Please bet again and start by START buuton", "Error", 0);Deck.cards.clear();
        } else {

            Deck.newDeck();
            Hand.drawCardPlayer();
            Hand.drawCardDealer();

            player1.setIcon(null);
            player2.setIcon(null);
            player3.setIcon(null);
            player4.setIcon(null);
            player5.setIcon(null);

            dealer1.setIcon(null);
            dealer2.setIcon(null);
            dealer3.setIcon(null);
            dealer4.setIcon(null);
            dealer5.setIcon(null);

            playerScore = 0;
            dealerScore = 0;
            moneyBet = 0;

            showMoneyAndBet();

            round = -1;
            count = 0;
        }// TODO add your handling code here:
    }//GEN-LAST:event_ResetActionPerformed

    private void coin25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coin25ActionPerformed
        money -= 25;
        showMoneyAndBet();
        if (Money.isEnough(money)) {
            moneyBet += 25;
            showMoneyAndBet();
        } else {
            money += 25;
            showMoneyAndBet();
            JOptionPane.showMessageDialog(null, "           You do not have enough money!", "Error", 0);
        }// TODO add your handling code here:
    }//GEN-LAST:event_coin25ActionPerformed

    private void coin1000ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coin1000ActionPerformed
        money -= 1000;
        showMoneyAndBet();
        if (Money.isEnough(money)) {
            moneyBet += 1000;
            showMoneyAndBet();
        } else {
            money += 1000;
            showMoneyAndBet();
            JOptionPane.showMessageDialog(null, "           You do not have enough money!", "Error", 0);
        }// TODO add your handling code here:
    }//GEN-LAST:event_coin1000ActionPerformed

    private void coin5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coin5ActionPerformed
        money -= 5;
        showMoneyAndBet();
        if (Money.isEnough(money)) {
            moneyBet += 5;
            showMoneyAndBet();
        } else {
            money += 5;
            showMoneyAndBet();
            JOptionPane.showMessageDialog(null, "           You do not have enough money!", "Error", 0);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_coin5ActionPerformed

    private void coin100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coin100ActionPerformed
        money -= 100;
        showMoneyAndBet();
        if (Money.isEnough(money)) {
            moneyBet += 100;
            showMoneyAndBet();
        } else {
            money += 100;
            showMoneyAndBet();
            JOptionPane.showMessageDialog(null, "           You do not have enough money!", "Error", 0);
        }// TODO add your handling code here:
    }//GEN-LAST:event_coin100ActionPerformed

    private void coin500ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coin500ActionPerformed
        money -= 500;
        showMoneyAndBet();
        if (Money.isEnough(money)) {
            moneyBet += 500;
            showMoneyAndBet();
        } else {
            money += 500;
            showMoneyAndBet();
            JOptionPane.showMessageDialog(null, "           You do not have enough money!", "Error", 0);
        }// TODO add your handling code here:
    }//GEN-LAST:event_coin500ActionPerformed

    private void HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpActionPerformed
        new InformationPage().setVisible(true);
        this.setVisible(false);
// TODO add your handling code here:
    }//GEN-LAST:event_HelpActionPerformed

    /**
     * @param args the command line arguments
     */
    public void showMoneyAndBet() {
        MoneyShow.setText("Money : " + String.valueOf(money));
        MoneyBet.setText("Bet : " + String.valueOf(moneyBet));
    }

    public void checkBlackjackPlayer(int score) {
        if (score > 21) {
            JOptionPane.showMessageDialog(null, "           You busted\n              You lose!\nClick RESET and then click PLAY to play again", "Match Ended", 0);
            round = 10;
            moneyBet = 0;
            Reset.setVisible(true);
            showMoneyAndBet();
        } else {

        }
    }

    public void checkBlackjackDealer(int score) {
        if (score > 21) {
            JOptionPane.showMessageDialog(null, "           Dealer busted\n              You win!\nClick RESET and then click PLAY to play again", "Match Ended", 0);
            round = 10;
            money += moneyBet * 3;
            moneyBet = 0;
            showMoneyAndBet();
        } else {

        }
    }

    public void checkWinORLose(int playerScore, int dealerScore) {
        if (playerScore <= 21 && dealerScore <= 21) {
            if (playerScore > dealerScore) {
                JOptionPane.showMessageDialog(null, "           You win!\nClick RESET and then click PLAY to play again", "Match Ended", 0);
                System.out.print("1");
                money += moneyBet * 2;
                moneyBet = 0;
                showMoneyAndBet();
            } else if (playerScore == dealerScore) {
                JOptionPane.showMessageDialog(null, "           Draw game!\nClick RESET and then click PLAY to play again", "Match Ended", 0);
                System.out.print("2");
                Reset.setVisible(true);
                money += moneyBet;
                moneyBet = 0;
                showMoneyAndBet();
            } else {
                JOptionPane.showMessageDialog(null, "           You lose!\nClick RESET and then click PLAY to play again", "Match Ended", 0);
                System.out.print("3");
                Reset.setVisible(true);
                moneyBet = 0;
                showMoneyAndBet();
            }
        } else if (playerScore <= 21 && dealerScore > 21) {
            JOptionPane.showMessageDialog(null, "           Dealer busted\n              You win!\nClick RESET and then click PLAY to play again", "Match Ended", 0);
            System.out.print("4");
            money += moneyBet * 2;
            moneyBet = 0;
            showMoneyAndBet();

        } else if (playerScore > 21 && dealerScore <= 21) {
            JOptionPane.showMessageDialog(null, "           You busted\n           You lose!\nClick RESET and then click PLAY to play again", "Match Ended", 0);
            System.out.print("5");
            Reset.setVisible(true);
            moneyBet = 0;
            showMoneyAndBet();

        } else {
            JOptionPane.showMessageDialog(null, "           You lose!\nClick RESET and then click PLAY to play again", "Match Ended", 0);
            System.out.print("6");
            Reset.setVisible(true);
            moneyBet = 0;
            showMoneyAndBet();

        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayInterface().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Background;
    private javax.swing.JLabel Deckofcard;
    private javax.swing.JButton Help;
    private javax.swing.JButton Hit;
    private javax.swing.JLabel MoneyBet;
    private javax.swing.JLabel MoneyShow;
    private javax.swing.JButton Play;
    private javax.swing.JButton Reset;
    private javax.swing.JButton Stand;
    private javax.swing.JButton coin100;
    private javax.swing.JButton coin1000;
    private javax.swing.JButton coin25;
    private javax.swing.JButton coin5;
    private javax.swing.JButton coin500;
    private javax.swing.JLabel dealer1;
    private javax.swing.JLabel dealer2;
    private javax.swing.JLabel dealer3;
    private javax.swing.JLabel dealer4;
    private javax.swing.JLabel dealer5;
    private javax.swing.JLabel player1;
    private javax.swing.JLabel player2;
    private javax.swing.JLabel player3;
    private javax.swing.JLabel player4;
    private javax.swing.JLabel player5;
    // End of variables declaration//GEN-END:variables
}
